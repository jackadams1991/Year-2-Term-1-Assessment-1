/*
* Class Name: RentalGUI
* Class Purpose: This class creates the GUI and handles action and events that can occur with tabs and buttons
* Student ID: S0201412
* Student Name: Jack Adams
*/


import java.util.ArrayList;
import java.awt.BorderLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
import javax.swing.event.ChangeListener;
import javax.swing.event.ChangeEvent;
import javax.swing.table.DefaultTableModel;

public class RentalGUI extends JFrame implements ActionListener, ChangeListener {

    /**
     * Creates new form RentalGUI
     */
    public RentalGUI() {
        initComponents();
        //Adding action/change listeners for the tabs and buttons.
        rentalJTabbedPane.addChangeListener(this);
        roomSaveJButton.addActionListener(this);
        wholeSaveJButton.addActionListener(this);
        editUpdateJButton.addActionListener(this);
        exitJButton.addActionListener(this);        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new JScrollPane();
        jTable1 = new JTable();
        rentalJTabbedPane = new JTabbedPane();
        welcomeJPanel = new JPanel();
        welcomeJLabel = new JLabel();
        enterRentalJLabel = new JLabel();
        editRentalJLabel = new JLabel();
        displayRentalJLabel = new JLabel();
        exitJButton = new JButton();
        jLabel1 = new JLabel();
        wholeRentalJPanel = new JPanel();
        wholeRentalIdJLabel = new JLabel();
        wholeRentalIdJTextField = new JTextField();
        wholeAddressDetailsJLabel = new JLabel();
        wholeAddressDetailsJTextField = new JTextField();
        wholePriceJLabel = new JLabel();
        wholePriceJTextField = new JTextField();
        wholeFurnishedJLabel = new JLabel();
        wholeRoomJLabel = new JLabel();
        wholeRoomJTextField = new JTextField();
        wholeBathroomJLabel = new JLabel();
        wholeBathroomJTextField = new JTextField();
        wholeGarageJLabel = new JLabel();
        wholePetsJLabel = new JLabel();
        wholeRentalDescJLabel = new JLabel();
        wholeRentalDescJScrollPane = new JScrollPane();
        wholeRentalDescJTextArea = new JTextArea();
        wholeSaveJButton = new JButton();
        wholeFurnishedJComboBox = new JComboBox<>();
        wholeGarageJComboBox = new JComboBox<>();
        wholePetsJComboBox = new JComboBox<>();
        roomRentalJPanel = new JPanel();
        roomRentalIdJLabel = new JLabel();
        roomRentalIdJTextField = new JTextField();
        roomAddressDetailsJLabel = new JLabel();
        roomAddressDetailsJTextField = new JTextField();
        roomPriceJLabel = new JLabel();
        roomPriceJTextField = new JTextField();
        roomFurnishedJLabel = new JLabel();
        roomCouplesJLabel = new JLabel();
        roomBathroomJLabel = new JLabel();
        roomRentalDescJLabel = new JLabel();
        roomRentalDescJScrollPane = new JScrollPane();
        roomRentalDescJTextArea = new JTextArea();
        roomSaveJButton = new JButton();
        roomFurnishedJComboBox = new JComboBox<>();
        roomCouplesJComboBox = new JComboBox<>();
        roomAttBathrromJComboBox = new JComboBox<>();
        editRentalJPanel = new JPanel();
        editRentalIdJLabel = new JLabel();
        editRentalIdJTextField = new JTextField();
        editAddressDetailsJLabel = new JLabel();
        editAddressDetailsJTextField = new JTextField();
        editPriceJLabel = new JLabel();
        editPriceJTextField = new JTextField();
        editRoomJLabel = new JLabel();
        editRoomJTextField = new JTextField();
        editBathroomJLabel = new JLabel();
        editBathroomJTextField = new JTextField();
        editFurnishedJLabel = new JLabel();
        editGarageJLabel = new JLabel();
        editPetsJLabel = new JLabel();
        editCouplesJLabel = new JLabel();
        editAttBathroomJLabel = new JLabel();
        editRentalDescJLabel = new JLabel();
        editRentalDescJScrollPane = new JScrollPane();
        editRentalDescJTextArea = new JTextArea();
        editFurnishedJComboBox = new JComboBox<>();
        editCoupleJComboBox = new JComboBox<>();
        editGarageJComboBox = new JComboBox<>();
        editAttBathroomJComboBox = new JComboBox<>();
        editPetJComboBox = new JComboBox<>();
        editUpdateJButton = new JButton();
        displayRentalJPanel = new JPanel();
        jScrollPane3 = new JScrollPane();
        displayRentalJTable = new JTable();

        jTable1.setModel(new DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("FSA Rental System");

        welcomeJLabel.setFont(new Font("Tahoma", 1, 14)); // NOI18N
        welcomeJLabel.setText("Welcome to the Friendly Student Accommodation Rental Entry system!");

        enterRentalJLabel.setFont(new Font("Tahoma", 0, 13)); // NOI18N
        enterRentalJLabel.setText("To enter a new house rental, use the New House tab. To enter a new room rental, use the New Room tab.");

        editRentalJLabel.setFont(new Font("Tahoma", 0, 13)); // NOI18N
        editRentalJLabel.setText("To edit a previously entered rental, use the Edit Rental tab. NOTE: A rental must be entered before using this tab. ");

        displayRentalJLabel.setFont(new Font("Tahoma", 0, 13)); // NOI18N
        displayRentalJLabel.setText("To display the entered properties, use the Display All tab. NOTE: A rental must be entered before using this tab.");

        exitJButton.setText("Exit");

        jLabel1.setFont(new Font("Tahoma", 0, 13)); // NOI18N
        jLabel1.setText("To exit the system, use the Exit button below on this tab or the X symbol in the top right hand corner.");

        GroupLayout welcomeJPanelLayout = new GroupLayout(welcomeJPanel);
        welcomeJPanel.setLayout(welcomeJPanelLayout);
        welcomeJPanelLayout.setHorizontalGroup(welcomeJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(welcomeJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(welcomeJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(welcomeJPanelLayout.createSequentialGroup()
                        .addGroup(welcomeJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(exitJButton)
                            .addComponent(editRentalJLabel)
                            .addComponent(jLabel1)
                            .addComponent(enterRentalJLabel))
                        .addContainerGap(119, Short.MAX_VALUE))
                    .addGroup(welcomeJPanelLayout.createSequentialGroup()
                        .addGroup(welcomeJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(displayRentalJLabel)
                            .addComponent(welcomeJLabel))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        welcomeJPanelLayout.setVerticalGroup(welcomeJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(welcomeJPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(welcomeJLabel)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(enterRentalJLabel)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editRentalJLabel)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(displayRentalJLabel)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 277, Short.MAX_VALUE)
                .addComponent(exitJButton)
                .addContainerGap())
        );

        rentalJTabbedPane.addTab("Welcome", welcomeJPanel);

        wholeRentalIdJLabel.setText("Rental ID:");

        wholeRentalIdJTextField.setEditable(false);

        wholeAddressDetailsJLabel.setText("Rental Address:");

        wholePriceJLabel.setText("Weekly Price: $");

        wholeFurnishedJLabel.setText("Rental Furnished? :");

        wholeRoomJLabel.setText("Number of Rooms:");

        wholeBathroomJLabel.setText("Number of Bathrooms:");

        wholeGarageJLabel.setText("Garage Space? :");

        wholePetsJLabel.setText("Pets Allowed? :");

        wholeRentalDescJLabel.setText("Rental Description:");

        wholeRentalDescJTextArea.setColumns(20);
        wholeRentalDescJTextArea.setFont(new Font("Tahoma", 0, 11)); // NOI18N
        wholeRentalDescJTextArea.setRows(5);
        wholeRentalDescJScrollPane.setViewportView(wholeRentalDescJTextArea);

        wholeSaveJButton.setText("Save");

        wholeFurnishedJComboBox.setModel(new DefaultComboBoxModel<>(new String[] { "Please Select a Value...", "True", "False" }));

        wholeGarageJComboBox.setModel(new DefaultComboBoxModel<>(new String[] { "Please Select a Value...", "True", "False" }));

        wholePetsJComboBox.setModel(new DefaultComboBoxModel<>(new String[] { "Please Select a Value...", "True", "False" }));

        GroupLayout wholeRentalJPanelLayout = new GroupLayout(wholeRentalJPanel);
        wholeRentalJPanel.setLayout(wholeRentalJPanelLayout);
        wholeRentalJPanelLayout.setHorizontalGroup(wholeRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(wholeRentalJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(wholeRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addGroup(wholeRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(wholeRentalDescJLabel)
                        .addGroup(GroupLayout.Alignment.TRAILING, wholeRentalJPanelLayout.createSequentialGroup()
                            .addGroup(wholeRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                .addGroup(wholeRentalJPanelLayout.createSequentialGroup()
                                    .addComponent(wholeRoomJLabel)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(wholeRoomJTextField, GroupLayout.PREFERRED_SIZE, 45, GroupLayout.PREFERRED_SIZE))
                                .addGroup(wholeRentalJPanelLayout.createSequentialGroup()
                                    .addComponent(wholeBathroomJLabel)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(wholeBathroomJTextField, GroupLayout.PREFERRED_SIZE, 26, GroupLayout.PREFERRED_SIZE))
                                .addGroup(wholeRentalJPanelLayout.createSequentialGroup()
                                    .addComponent(wholeRentalIdJLabel)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(wholeRentalIdJTextField, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE))
                                .addGroup(wholeRentalJPanelLayout.createSequentialGroup()
                                    .addComponent(wholePriceJLabel)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(wholePriceJTextField)))
                            .addGap(164, 164, 164)
                            .addGroup(wholeRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(wholeRentalJPanelLayout.createSequentialGroup()
                                    .addComponent(wholePetsJLabel)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(wholePetsJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGroup(wholeRentalJPanelLayout.createSequentialGroup()
                                    .addComponent(wholeFurnishedJLabel)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(wholeFurnishedJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                .addGroup(wholeRentalJPanelLayout.createSequentialGroup()
                                    .addComponent(wholeGarageJLabel)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(wholeGarageJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                            .addGap(14, 14, 14))
                        .addComponent(wholeSaveJButton))
                    .addGroup(wholeRentalJPanelLayout.createSequentialGroup()
                        .addComponent(wholeAddressDetailsJLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(wholeAddressDetailsJTextField, GroupLayout.PREFERRED_SIZE, 420, GroupLayout.PREFERRED_SIZE))
                    .addComponent(wholeRentalDescJScrollPane))
                .addContainerGap(223, Short.MAX_VALUE))
        );
        wholeRentalJPanelLayout.setVerticalGroup(wholeRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(wholeRentalJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(wholeRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(wholeRentalIdJLabel)
                    .addComponent(wholeRentalIdJTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(wholeRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(wholeAddressDetailsJLabel)
                    .addComponent(wholeAddressDetailsJTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(wholeRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(wholePriceJLabel)
                    .addComponent(wholePriceJTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(wholeFurnishedJLabel)
                    .addComponent(wholeFurnishedJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(wholeRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(wholeRoomJLabel)
                    .addComponent(wholeRoomJTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(wholeGarageJLabel)
                    .addComponent(wholeGarageJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(wholeRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(wholeBathroomJLabel)
                    .addComponent(wholeBathroomJTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(wholePetsJLabel)
                    .addComponent(wholePetsJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(wholeRentalDescJLabel)
                .addGap(2, 2, 2)
                .addComponent(wholeRentalDescJScrollPane, GroupLayout.PREFERRED_SIZE, 190, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(wholeSaveJButton)
                .addContainerGap())
        );

        rentalJTabbedPane.addTab("New House", wholeRentalJPanel);

        roomRentalIdJLabel.setText("Rental ID:");

        roomRentalIdJTextField.setEditable(false);

        roomAddressDetailsJLabel.setText("Rental Address:");

        roomPriceJLabel.setText("Weekly Price: $");

        roomFurnishedJLabel.setText("Rental Furnished? :");

        roomCouplesJLabel.setText("Couples Allowed? :");

        roomBathroomJLabel.setText("Attached Bathroom? :");

        roomRentalDescJLabel.setText("Rental Description:");

        roomRentalDescJTextArea.setColumns(20);
        roomRentalDescJTextArea.setRows(5);
        roomRentalDescJScrollPane.setViewportView(roomRentalDescJTextArea);

        roomSaveJButton.setText("Save");

        roomFurnishedJComboBox.setModel(new DefaultComboBoxModel<>(new String[] { "Please Select a Value...", "True", "False" }));

        roomCouplesJComboBox.setModel(new DefaultComboBoxModel<>(new String[] { "Please Select a Value...", "True", "False" }));

        roomAttBathrromJComboBox.setModel(new DefaultComboBoxModel<>(new String[] { "Please Select a Value...", "True", "False" }));

        GroupLayout roomRentalJPanelLayout = new GroupLayout(roomRentalJPanel);
        roomRentalJPanel.setLayout(roomRentalJPanelLayout);
        roomRentalJPanelLayout.setHorizontalGroup(roomRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(roomRentalJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(roomRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(roomRentalJPanelLayout.createSequentialGroup()
                        .addComponent(roomRentalIdJLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(roomRentalIdJTextField, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE))
                    .addGroup(roomRentalJPanelLayout.createSequentialGroup()
                        .addComponent(roomCouplesJLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(roomCouplesJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addGroup(roomRentalJPanelLayout.createSequentialGroup()
                        .addComponent(roomBathroomJLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(roomAttBathrromJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addComponent(roomRentalDescJLabel)
                    .addGroup(roomRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                        .addComponent(roomRentalDescJScrollPane, GroupLayout.Alignment.LEADING)
                        .addGroup(roomRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(roomSaveJButton)
                            .addGroup(roomRentalJPanelLayout.createSequentialGroup()
                                .addComponent(roomAddressDetailsJLabel)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(roomAddressDetailsJTextField, GroupLayout.PREFERRED_SIZE, 420, GroupLayout.PREFERRED_SIZE))))
                    .addGroup(roomRentalJPanelLayout.createSequentialGroup()
                        .addComponent(roomPriceJLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(roomPriceJTextField, GroupLayout.PREFERRED_SIZE, 71, GroupLayout.PREFERRED_SIZE))
                    .addGroup(roomRentalJPanelLayout.createSequentialGroup()
                        .addComponent(roomFurnishedJLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(roomFurnishedJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(273, Short.MAX_VALUE))
        );
        roomRentalJPanelLayout.setVerticalGroup(roomRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(roomRentalJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(roomRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(roomRentalIdJLabel)
                    .addComponent(roomRentalIdJTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(roomRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(roomAddressDetailsJLabel)
                    .addComponent(roomAddressDetailsJTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(roomRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(roomPriceJLabel)
                    .addComponent(roomPriceJTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(roomRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(roomFurnishedJLabel)
                    .addComponent(roomFurnishedJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(roomRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(roomCouplesJLabel)
                    .addComponent(roomCouplesJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(roomRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(roomBathroomJLabel)
                    .addComponent(roomAttBathrromJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(roomRentalDescJLabel)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(roomRentalDescJScrollPane, GroupLayout.PREFERRED_SIZE, 165, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(roomSaveJButton)
                .addContainerGap())
        );

        rentalJTabbedPane.addTab("New Room", roomRentalJPanel);

        editRentalIdJLabel.setText("Rental ID:");

        editRentalIdJTextField.setEditable(false);

        editAddressDetailsJLabel.setText("Rental Address:");

        editPriceJLabel.setText("Weekly Price: $");

        editRoomJLabel.setText("Number of Rooms:");

        editBathroomJLabel.setText("Number of Bathrooms:");

        editFurnishedJLabel.setText("Rental Furnished? :");

        editGarageJLabel.setText("Garage Space? :");

        editPetsJLabel.setText("Pets Allowed? :");

        editCouplesJLabel.setText("Couples Allowed? :");

        editAttBathroomJLabel.setText("Attached Bathroom? :");

        editRentalDescJLabel.setText("Rental Description:");

        editRentalDescJTextArea.setColumns(20);
        editRentalDescJTextArea.setRows(5);
        editRentalDescJScrollPane.setViewportView(editRentalDescJTextArea);

        editFurnishedJComboBox.setModel(new DefaultComboBoxModel<>(new String[] { "Please Select a Value...", "True", "False" }));

        editCoupleJComboBox.setModel(new DefaultComboBoxModel<>(new String[] { "Please Select a Value...", "True", "False" }));

        editGarageJComboBox.setModel(new DefaultComboBoxModel<>(new String[] { "Please Select a Value...", "True", "False" }));

        editAttBathroomJComboBox.setModel(new DefaultComboBoxModel<>(new String[] { "Please Select a Value...", "True", "False" }));

        editPetJComboBox.setModel(new DefaultComboBoxModel<>(new String[] { "Please Select a Value...", "True", "False" }));

        editUpdateJButton.setText("Update");

        GroupLayout editRentalJPanelLayout = new GroupLayout(editRentalJPanel);
        editRentalJPanel.setLayout(editRentalJPanelLayout);
        editRentalJPanelLayout.setHorizontalGroup(editRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(editRentalJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(editRentalDescJScrollPane, GroupLayout.PREFERRED_SIZE, 582, GroupLayout.PREFERRED_SIZE)
                    .addGroup(editRentalJPanelLayout.createSequentialGroup()
                        .addComponent(editRentalIdJLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editRentalIdJTextField, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE))
                    .addGroup(editRentalJPanelLayout.createSequentialGroup()
                        .addComponent(editAddressDetailsJLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(editAddressDetailsJTextField, GroupLayout.PREFERRED_SIZE, 420, GroupLayout.PREFERRED_SIZE))
                    .addGroup(editRentalJPanelLayout.createSequentialGroup()
                        .addGroup(editRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(editRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                .addGroup(editRentalJPanelLayout.createSequentialGroup()
                                    .addComponent(editRoomJLabel)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(editRoomJTextField, GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE))
                                .addGroup(editRentalJPanelLayout.createSequentialGroup()
                                    .addComponent(editPriceJLabel)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(editPriceJTextField)))
                            .addGroup(editRentalJPanelLayout.createSequentialGroup()
                                .addComponent(editBathroomJLabel)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editBathroomJTextField, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE)))
                        .addGap(53, 53, 53)
                        .addGroup(editRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(editRentalJPanelLayout.createSequentialGroup()
                                .addComponent(editPetsJLabel)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editPetJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                            .addGroup(editRentalJPanelLayout.createSequentialGroup()
                                .addComponent(editGarageJLabel)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editGarageJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(editAttBathroomJLabel)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editAttBathroomJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                            .addGroup(editRentalJPanelLayout.createSequentialGroup()
                                .addComponent(editFurnishedJLabel)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editFurnishedJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(editCouplesJLabel)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(editCoupleJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))))
                    .addComponent(editRentalDescJLabel)
                    .addComponent(editUpdateJButton))
                .addContainerGap(96, Short.MAX_VALUE))
        );
        editRentalJPanelLayout.setVerticalGroup(editRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(editRentalJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(editRentalIdJLabel)
                    .addComponent(editRentalIdJTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(editAddressDetailsJLabel)
                    .addComponent(editAddressDetailsJTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(editPriceJLabel)
                    .addComponent(editPriceJTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(editFurnishedJLabel)
                    .addComponent(editCouplesJLabel)
                    .addComponent(editFurnishedJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(editCoupleJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(editRoomJLabel)
                    .addComponent(editRoomJTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(editGarageJLabel)
                    .addComponent(editAttBathroomJLabel)
                    .addComponent(editGarageJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(editAttBathroomJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(editBathroomJLabel)
                    .addComponent(editBathroomJTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(editPetsJLabel)
                    .addComponent(editPetJComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(editRentalDescJLabel)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editRentalDescJScrollPane, GroupLayout.PREFERRED_SIZE, 183, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(editUpdateJButton)
                .addContainerGap())
        );

        rentalJTabbedPane.addTab("Edit Rental", editRentalJPanel);

        displayRentalJTable.setModel(new DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Rental Id", "Address", "Price", "Furnished", "Rooms", "Bathrooms", "Garage", "Pets", "Couples", "Att. Bathroom", "Description"
            }
        ) {
            Class[] types = new Class [] {
                String.class, String.class, Double.class, Boolean.class, Integer.class, Integer.class, Boolean.class, Boolean.class, Boolean.class, Boolean.class, String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        displayRentalJTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(displayRentalJTable);

        GroupLayout displayRentalJPanelLayout = new GroupLayout(displayRentalJPanel);
        displayRentalJPanel.setLayout(displayRentalJPanelLayout);
        displayRentalJPanelLayout.setHorizontalGroup(displayRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, GroupLayout.DEFAULT_SIZE, 784, Short.MAX_VALUE)
        );
        displayRentalJPanelLayout.setVerticalGroup(displayRentalJPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(displayRentalJPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        rentalJTabbedPane.addTab("Display All Rentals", displayRentalJPanel);

        getContentPane().add(rentalJTabbedPane, BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RentalGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RentalGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RentalGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RentalGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RentalGUI().setVisible(true);
            }
        });       
    }
    
    @Override //Overridden method for determining which tab is selected and what action to take based on the selected tab.
    public void stateChanged(ChangeEvent tabChangeEvent)
    {
        JTabbedPane selectedTab = (JTabbedPane) tabChangeEvent.getSource();
        int index = selectedTab.getSelectedIndex();
        
        if(index == 1) //Whole Rental (New House) tab, generates and sets the rental ID and then increments the static variable rentalIdNum in the Rental class
        {                                      
            setIdWholeRentalTab();
        }
        else if(index == 2) //Room Rental tab, generates and sets the rental ID and then increments the static variable rentalIdNum in the Rental class
        {
            setIdRoomRentalTab();
        }
        else if(index == 3) //Edit rental tab. Checks for a rental exists before letting the user search for a rental and editing it.
        {
            
            if(enteredRental == null)
            {
                JOptionPane.showMessageDialog(null, "You must enter a rental before using this tab"); //Message displayed if a rental is not initialized
                selectedTab.setSelectedIndex(0); //Returns user back to the welcome tab
            }
            else if(enteredRental != null)
            {
                String rentalIdSearchTerm; //Local variable to hold user search term
                rentalIdSearchTerm = JOptionPane.showInputDialog(null, "Enter a rental ID to search for:"); //Prompts user for an ID to search for a rental
        
                if(rentalIdSearchTerm.equals(enteredRental.getRentalId()) && enteredRental.getRentalId().startsWith(WHOLE_RENTAL_ID_PREFIX)) //Checks entered ID against the entered rental previously
                {
                    editWholeRental(); //Method called to fill in fields with information and with Whole Rental specific fields
                }
                else if(rentalIdSearchTerm.equals(enteredRental.getRentalId()) && enteredRental.getRentalId().startsWith(ROOM_RENTAL_ID_PREFIX))
                {
                    editRoomRental(); //Method called if a class cast exception is encountered and fills in fields with information and with Room Rental specific fields
                }                           
                else
                {
                    JOptionPane.showMessageDialog(null, "No rental with that ID was found."); //Message displayed if a rental was not found that matches the entered ID
                    selectedTab.setSelectedIndex(0); //returns user back to the welcome tab
                }
            }
        }                    
        else if(index == 4) //Display rental tab checks for a rental exists before displaying it.
        {
            if(enteredRental == null)
            {
                JOptionPane.showMessageDialog(null, "You must enter a rental before using this tab"); //Message displayed if a rental is not initialized
                selectedTab.setSelectedIndex(0); //Returns user back to the welcome tab
            }
            else if(enteredRental != null)
            {
                setDisplayTableRental();
            }
        }
    }
    
    @Override //Overridden method for save and update button actions
    public void actionPerformed(ActionEvent saveBtnPressed)
    {
        Object saveBtnSource = saveBtnPressed.getSource(); //saveBtnSource variable to hold the button source, used for determing what action to take for the different buttons.
        
        if(saveBtnSource == wholeSaveJButton) //Save button present on the Whole Rental tab
        {
            tryCatchWholeRentalMethod();
        }
        else if(saveBtnSource == roomSaveJButton) //Save button present on the Room Rental tab
        {
            tryCatchRoomRentalMethod();                    
        }
        else if(saveBtnSource == editUpdateJButton) //Section for the update button in the edit rental tab.
        {
            editUpdateRentalSaveBtnMethod();
        }
        else if(saveBtnSource == exitJButton) //Listens for the exit button being pressed
        {
            systemExit();
        }
    }
    
    //RentalGUI methods
    public void setIdWholeRentalTab()
    {
        wholeRentalIdJTextField.setText(WHOLE_RENTAL_ID_PREFIX + Integer.toString(Rental.rentalIdNum));                
    }
        
    public void setIdRoomRentalTab()
    {
        roomRentalIdJTextField.setText(ROOM_RENTAL_ID_PREFIX + Integer.toString(Rental.rentalIdNum));          
    }
    
    public void wholeRentalDataCheck()
    {
        //If else that checks the address and description fields are not empty
        if(wholeAddressDetailsJTextField.getText().isEmpty() || wholeAddressDetailsJTextField.getText().trim().equals(""))
        {
            JOptionPane.showMessageDialog(null, "Please enter an address for the rental");
            wholeAddressDetailsJTextField.requestFocus();
        }
        else if(wholeRentalDescJTextArea.getText().isEmpty() || wholeRentalDescJTextArea.getText().trim().equals(""))
        {
            JOptionPane.showMessageDialog(null, "Please enter a description for the rental");
            wholeRentalDescJTextArea.requestFocus();
        }
        else
        {
            saveWholeRental(); //Method called to get data from fields and assign to variables.
            //Once data is assigned, new object is created and assigned to an Object variable
            Rental aNewHouse = new WholeRental(rentalIdString, weeklyPrice, addressDetails, rentalDescription, rentalFurnished, numRooms, numBathrooms, garageSpace, petsAllowed);
            enteredRental = aNewHouse;
            ++Rental.rentalIdNum;
            clearWholeRentalForm(); //Method called to clear the form
        }
    }
    
    public void roomRentalDataCheck()
    {
        //If else that checks the address and description fields are not empty
        if(roomAddressDetailsJTextField.getText().isEmpty() || roomAddressDetailsJTextField.getText().trim().equals(""))
        {
            JOptionPane.showMessageDialog(null, "Please enter an address for the rental");
            roomAddressDetailsJTextField.requestFocus();   
        }
        else if(roomRentalDescJTextArea.getText().isEmpty() || roomRentalDescJTextArea.getText().trim().equals(""))
        {
            JOptionPane.showMessageDialog(null, "Please enter a description for the rental");
            roomRentalDescJTextArea.requestFocus();
        }
        else
        {
            saveRoomRental();                
            //Once data is assigned, new object is created and assigned to an Object variable
            Rental aNewRoom = new RoomRental(rentalIdString, weeklyPrice, addressDetails, rentalDescription, rentalFurnished, couplesAllowed, attachedBathroom);
            enteredRental = aNewRoom;
            ++Rental.rentalIdNum;
            clearRoomRentalForm(); //Method called to clear the form
        }
    }
    
    public void wholeRentalNumberException() //Exception catch method for empty fields for the Price, Number of Rooms/Bathrooms. Displays a message and returns focus to the empty field.
    {
        if(wholePriceJTextField.getText() == null || wholePriceJTextField.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Please enter the price for the rental.");
            wholePriceJTextField.requestFocus();
        }
        else if(wholeRoomJTextField.getText() == null || wholeRoomJTextField.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Please enter the number of rooms for the rental.");
            wholeRoomJTextField.requestFocus();
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Please enter the number of bathrooms for the rental.");
            wholeBathroomJTextField.requestFocus(); 
        }
    }
    
    public void roomPriceEmpty()
    {
        JOptionPane.showMessageDialog(null, "Please enter the weekly price for the rental.");
        roomPriceJTextField.requestFocus();
    }
    
    public void saveWholeRental() //Method designed to assign entered date to variables for Whole Rentals
    {
        rentalIdString = wholeRentalIdJTextField.getText();
        addressDetails = wholeAddressDetailsJTextField.getText();
        weeklyPrice = Double.parseDouble(wholePriceJTextField.getText());
        numRooms = Integer.parseInt(wholeRoomJTextField.getText());
        numBathrooms = Integer.parseInt(wholeBathroomJTextField.getText());
        rentalFurnished = wholeFurnishedJComboBox.getSelectedIndex();
        garageSpace = wholeGarageJComboBox.getSelectedIndex();
        petsAllowed = wholePetsJComboBox.getSelectedIndex();
        rentalDescription = wholeRentalDescJTextArea.getText();
    }
    
    public void saveRoomRental() //Method designed to assign entered date to variables for Room Rentals
    {
        rentalIdString = roomRentalIdJTextField.getText();            
        addressDetails = roomAddressDetailsJTextField.getText();
        weeklyPrice = Double.parseDouble(roomPriceJTextField.getText());
        rentalFurnished = roomFurnishedJComboBox.getSelectedIndex();
        couplesAllowed = roomCouplesJComboBox.getSelectedIndex();
        attachedBathroom = roomAttBathrromJComboBox.getSelectedIndex();
        rentalDescription = roomRentalDescJTextArea.getText();
    }
    
    public void tryCatchWholeRentalMethod()
    {
        try
        {   //Try block calls method which checks address and description field has data.
            wholeRentalDataCheck();                                                                        
        }
        catch(NumberFormatException | NullPointerException ex)
        {
            //Method called if an exception is encountered on the number fields.
            wholeRentalNumberException();
        }
    }
    
    public void tryCatchRoomRentalMethod()
    {
        try
        {
            //Try block calls method which checks address and description field has data.
            roomRentalDataCheck();
        }
        catch(NumberFormatException | NullPointerException ex) //Exception catch for empty fields for the Price. Displays a message and returns focus to the empty field.
        {
            //Catch block for an empty Price field
            roomPriceEmpty();
        }
    }
    
    public void fillEditTabWithData()
    {

    }
    
    public void editWholeRental() //Method designed to set the data fields with previously entered data of the rental in the Edit Rental Tab - Whole Rentals
    {        
        editCoupleJComboBox.setEnabled(false);
        editAttBathroomJComboBox.setEnabled(false);
        
        editRentalIdJTextField.setText(enteredRental.getRentalId());
        editAddressDetailsJTextField.setText(enteredRental.getAddressDetails());
        editPriceJTextField.setText(String.format("%.2f", (enteredRental.getWeeklyPrice())));
        editRentalDescJTextArea.setText(enteredRental.getRentalDescription());
        editFurnishedJComboBox.setSelectedIndex(enteredRental.getRentalFurnished());
        wh1 = (WholeRental) enteredRental;
        editRoomJTextField.setText(Integer.toString(wh1.getNumberOfRooms()));
        editBathroomJTextField.setText(Integer.toString(wh1.getNumberOfBathrooms()));
        editGarageJComboBox.setSelectedIndex(wh1.getGarageSpace());
        editPetJComboBox.setSelectedIndex(wh1.getPetsAllowed());
    }
    
    public void editRoomRental() //Method designed to set the data fields with previously entered data of the rental Edit Rental Tab - Room Rentals
    {
        editRoomJTextField.setEnabled(false);
        editBathroomJTextField.setEnabled(false);
        editGarageJComboBox.setEnabled(false);
        editPetJComboBox.setEnabled(false);
        
        editRentalIdJTextField.setText(enteredRental.getRentalId());
        editAddressDetailsJTextField.setText(enteredRental.getAddressDetails());
        editPriceJTextField.setText(String.format("%.2f",(enteredRental.getWeeklyPrice())));
        editRentalDescJTextArea.setText(enteredRental.getRentalDescription());
        editFurnishedJComboBox.setSelectedIndex(enteredRental.getRentalFurnished());
        rr1 = (RoomRental) enteredRental;
        editCoupleJComboBox.setSelectedIndex(rr1.getCouplesAllowed());
        editAttBathroomJComboBox.setSelectedIndex(rr1.getAttachedBathroom());
    }
    
    public void editUpdateRentalSaveBtnMethod()
    {
        if(editRentalIdJTextField.getText().startsWith(WHOLE_RENTAL_ID_PREFIX)) //Checks what the rental ID in the field starts with to ensure correct object is updated.
        {
            try
            {                                         
                //Try block calls 4 methods, data check, data assignment, form clearing and option to enter another rental
                editUpdateWholeDataCheck();
                editUpdateWholeRental();
                clearUpdateTabForm();
                fillEditTabWithData();
            }
            catch(NumberFormatException | NullPointerException ex) //Exception catch for empty or null number fields
            {
                //Catch block for an empty number fields
                editUpdateWholeRentalNumberException();                    
            }
        }
        else if(editRentalIdJTextField.getText().startsWith(ROOM_RENTAL_ID_PREFIX))
        {
            try
            {
                //Try block calls 4 methods, data check, data assignment form clearing and option to enter another rental
                editUpdateRoomDataCheck();
                editUpdateRoomRental();
                clearUpdateTabForm();
                fillEditTabWithData();
            }
            catch(NumberFormatException | NullPointerException ex)
            {
                //Catch block for an empty Price field
                editUpdateRoomRentalPriceException();
            }
        }
    }
    
    public void editUpdateWholeDataCheck()
    {
        if(editAddressDetailsJTextField.getText().isEmpty() || editAddressDetailsJTextField.getText().trim().equals("")) //If else to ensure data existis in the address and description fields
        {
            JOptionPane.showMessageDialog(null, "The rental address must not be empty");
            editAddressDetailsJTextField.requestFocus();
        }
        else if(editRentalDescJTextArea.getText().isEmpty() || editRentalDescJTextArea.getText().trim().equals(""))
        {
            JOptionPane.showMessageDialog(null, "The rental description field must not be empty");
            editRentalDescJTextArea.requestFocus();
        }
        else
        {
            //Call of method to assign data from fields to variables
            editUpdateWholeRental();
            //Data put into an object which is assigned to the object variable
            
        }
    }
    
    public void editUpdateRoomDataCheck()
    {
        if(editAddressDetailsJTextField.getText().isEmpty() || editAddressDetailsJTextField.getText().trim().equals("")) //If else to ensure data existis in the address and description fields
        {
            JOptionPane.showMessageDialog(null, "The rental address must not be empty");
            editAddressDetailsJTextField.requestFocus();
        }
        else if(editRentalDescJTextArea.getText().isEmpty() || editRentalDescJTextArea.getText().trim().equals(""))
        {
            JOptionPane.showMessageDialog(null, "The rental description field must not be empty");
            editRentalDescJTextArea.requestFocus();
        }
        else //If data is found in the address and description fields, the system moves onto assigning data in the fields to variables.
        {
            //Call of method to assign data from fields to variables
            editUpdateRoomRental();
            //Data put into an object which is assigned to the object variable
            
        }
    }
    
    public void editUpdateWholeRentalNumberException()
    {
        if(editPriceJTextField.getText() == null || editPriceJTextField.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Please enter the price for the rental.");
            editPriceJTextField.requestFocus();
        }
        else if(editRoomJTextField.getText() == null || editRoomJTextField.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Please enter the number of rooms for the rental.");
            editRoomJTextField.requestFocus();
        }
        else if(editBathroomJTextField.getText() == null || editBathroomJTextField.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Please enter the number of bathrooms for the rental.");
            editBathroomJTextField.requestFocus(); 
        }
    }
    
    public void editUpdateRoomRentalPriceException()
    {
        if(editPriceJTextField.getText() == null || editPriceJTextField.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(null, "Please enter the price for the rental.");
            editPriceJTextField.requestFocus();
        }
    }
    
    public void editUpdateWholeRental()
    {
        rentalIdString = editRentalIdJTextField.getText();
        addressDetails = editAddressDetailsJTextField.getText();
        weeklyPrice = Double.parseDouble(editPriceJTextField.getText());
        numRooms = Integer.parseInt(editRoomJTextField.getText());
        numBathrooms = Integer.parseInt(editBathroomJTextField.getText());
        rentalFurnished = editFurnishedJComboBox.getSelectedIndex();
        garageSpace = editGarageJComboBox.getSelectedIndex();
        petsAllowed = editPetJComboBox.getSelectedIndex();
        rentalDescription = editRentalDescJTextArea.getText();
        Rental aNewHouse = new WholeRental(rentalIdString, weeklyPrice, addressDetails, rentalDescription, rentalFurnished, numRooms, numBathrooms, garageSpace, petsAllowed);
        enteredRental = aNewHouse;
    }
    
    public void editUpdateRoomRental()
    {
        rentalIdString = editRentalIdJTextField.getText();
        addressDetails = editAddressDetailsJTextField.getText();
        weeklyPrice = Double.parseDouble(editPriceJTextField.getText());
        rentalFurnished = editFurnishedJComboBox.getSelectedIndex();
        couplesAllowed = editCoupleJComboBox.getSelectedIndex();
        attachedBathroom = editAttBathroomJComboBox.getSelectedIndex();
        rentalDescription = editRentalDescJTextArea.getText();
        Rental aNewRoom = new RoomRental(rentalIdString, weeklyPrice, addressDetails, rentalDescription, rentalFurnished, couplesAllowed, attachedBathroom);
        enteredRental = aNewRoom;
    }
    
    public void clearUpdateTabForm()
    {
        editRentalIdJTextField.setText("");
        editAddressDetailsJTextField.setText("");
        editPriceJTextField.setText("");
        editRoomJTextField.setText("");
        editBathroomJTextField.setText("");
        editRentalDescJTextArea.setText("");
        editFurnishedJComboBox.setSelectedIndex(0);
        editGarageJComboBox.setSelectedIndex(0);
        editPetJComboBox.setSelectedIndex(0);
        editFurnishedJComboBox.setSelectedIndex(0);
        editCoupleJComboBox.setSelectedIndex(0);
        editAttBathroomJComboBox.setSelectedIndex(0);
    }
       
    public void setDisplayTableRental()
    {
        displayRentalJTable.setValueAt(enteredRental.getRentalId(), 0, 0);
        displayRentalJTable.setValueAt(enteredRental.getAddressDetails(), 0, 1);
        displayRentalJTable.setValueAt(enteredRental.getWeeklyPrice(), 0, 2);
        displayRentalJTable.setValueAt(determineRentalFurnishedTrueFalse(), 0, 3);
        displayRentalJTable.setValueAt(enteredRental.getRentalDescription(), 0, 10);
        determineWholeOrRoomRental();
    }
    
    public void determineWholeOrRoomRental()
    {
        if(enteredRental.getRentalId().startsWith(WHOLE_RENTAL_ID_PREFIX))
        {
            wh1 = (WholeRental) enteredRental;
            displayRentalJTable.setValueAt(wh1.getNumberOfRooms(), 0, 4);
            displayRentalJTable.setValueAt(wh1.getNumberOfBathrooms(), 0, 5);
            displayRentalJTable.setValueAt(determineGargeSpaceTrueFalse(), 0, 6);
            displayRentalJTable.setValueAt(determinePetsAllowedTrueFalse(), 0, 7);
        }
        else
        {
            rr1 = (RoomRental) enteredRental;
            displayRentalJTable.setValueAt(determineCouplesAllowed(), 0, 8);
            displayRentalJTable.setValueAt(determineAttachedBathroom(), 0, 9);
        }
    }
    
    public boolean determineGargeSpaceTrueFalse()
    {
        wh1 = (WholeRental) enteredRental;
        boolean isThereGarageSpace = false;
        if(wh1.getGarageSpace() == 1)
        {
            isThereGarageSpace = true;
        }
        else
        {
            isThereGarageSpace = false;
        }
        return isThereGarageSpace;
    }
    
    public boolean determinePetsAllowedTrueFalse()
    {
        wh1 = (WholeRental) enteredRental;
        boolean isPetsAllowed = false;
        if(wh1.getPetsAllowed() == 1)
        {
            isPetsAllowed = true;
        }
        return isPetsAllowed;
    }
    
    public boolean determineRentalFurnishedTrueFalse()
    {
        boolean isRentalFurnished = false;
        if(enteredRental.getRentalId().startsWith(WHOLE_RENTAL_ID_PREFIX) && enteredRental.getRentalFurnished() == 1)
        {
            isRentalFurnished = true;
        }
        else if(enteredRental.getRentalId().startsWith(WHOLE_RENTAL_ID_PREFIX) && enteredRental.getRentalFurnished() == 2)
        {
            isRentalFurnished = false;
        }
        else if(enteredRental.getRentalId().startsWith(ROOM_RENTAL_ID_PREFIX) && enteredRental.getRentalFurnished() == 1)
        {
            isRentalFurnished = true;
        }
        else
        {
            isRentalFurnished = false;
        }
        return isRentalFurnished;
    }
    
    public boolean determineCouplesAllowed()
    {
        rr1 = (RoomRental) enteredRental;
        boolean isCouplesAllowed = false;
        if(rr1.getCouplesAllowed() == 1)
        {
            isCouplesAllowed = true;
        }
        return isCouplesAllowed;
    }
    
    public boolean determineAttachedBathroom()
    {
        rr1 = (RoomRental) enteredRental;
        boolean isBathroomAttached = false;
        if(rr1.getAttachedBathroom() == 1)
        {
            isBathroomAttached = true;
        }
        return isBathroomAttached;
    }
    
    public void clearWholeRentalForm() //Method will clear the New House Rental (Whole Rental) tab for a new entry. Generates a new id as well.
    {
        wholeRentalIdJTextField.setText(WHOLE_RENTAL_ID_PREFIX + Integer.toString(Rental.rentalIdNum));
        
        wholeAddressDetailsJTextField.setText("");
        wholePriceJTextField.setText("");
        wholeRoomJTextField.setText("");
        wholeBathroomJTextField.setText("");
        wholeFurnishedJComboBox.setSelectedIndex(0);
        wholeGarageJComboBox.setSelectedIndex(0);
        wholePetsJComboBox.setSelectedIndex(0);
        wholeRentalDescJTextArea.setText("");
    }
    
    public void clearRoomRentalForm() //Method will clear the New Room Rental (Room Rental) tab for a new entry. Generates a new id as well.
    {
        roomRentalIdJTextField.setText(ROOM_RENTAL_ID_PREFIX + Integer.toString(Rental.rentalIdNum));
        
        roomAddressDetailsJTextField.setText("");
        roomPriceJTextField.setText("");
        roomFurnishedJComboBox.setSelectedIndex(0);
        roomCouplesJComboBox.setSelectedIndex(0);
        roomAttBathrromJComboBox.setSelectedIndex(0);
        roomRentalDescJTextArea.setText("");
    }
    
    public void systemExit()
    {
        int exitConfirmation = JOptionPane.showConfirmDialog(null, "Are you sure you wish to exit", "Confirm Exit", JOptionPane.YES_NO_OPTION); //Displays an option box with yes or no
        if(exitConfirmation == JOptionPane.YES_OPTION) //If the yes button is pressed, system is exited.
        {
            System.exit(0);
        }
    }   
    
    private static String rentalIdString; //String variable to hold the generated rental ID
    private double weeklyPrice; //Double variable to hold the entered price for the rental - applicable for all rentals
    private String addressDetails; //String variable to hold the entered address details for the rental - applicable for all rentals
    private String rentalDescription; //String variable to hold a description of the entered rental - applicable for all rentals
    private int rentalFurnished; //Boolean variable to indicate whether the rental is furnished or not - applicable for all rentals
    private int numRooms; //Int variable to hold the number of rooms a Whole rental may contain
    private int numBathrooms; //Int variable to hold the number of bathrooms a Whole rental may contain       
    private int garageSpace; //Int variable which holds the chosen selection in a JComboBox - True or False - if a Whole Rental has a garage space or not
    private int petsAllowed; //Int variable which holds the chosen selection in a JComboBox - True or False - if a Whole Rental allows pets
    private int couplesAllowed; //Int variable which holds the chosen selection in a JComboBox - True or False - if a Room Rental allows for couples
    private int attachedBathroom; //Int variable which holds the chosen selection in a JComboBox - True or False - if a Room Rental has an attached bathroom
    private Rental enteredRental; //Object variable which holds the created or updated rental object - Can be Room or Whole rental object
    private WholeRental wh1; //Object variable - Used for casting Rental object down to access WholeRental specific methods
    private RoomRental rr1; //Object variable - Used for casting Rental object down to access RoomRental specific methods
    private final String WHOLE_RENTAL_ID_PREFIX = "W"; //Final String variable to hold the ID prefix for a whole rental ID
    private final String ROOM_RENTAL_ID_PREFIX = "R"; //Final String variable to hold the ID prefix for a room rental ID
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel displayRentalJLabel;
    private JPanel displayRentalJPanel;
    private JTable displayRentalJTable;
    private JLabel editAddressDetailsJLabel;
    private JTextField editAddressDetailsJTextField;
    private JComboBox<String> editAttBathroomJComboBox;
    private JLabel editAttBathroomJLabel;
    private JLabel editBathroomJLabel;
    private JTextField editBathroomJTextField;
    private JComboBox<String> editCoupleJComboBox;
    private JLabel editCouplesJLabel;
    private JComboBox<String> editFurnishedJComboBox;
    private JLabel editFurnishedJLabel;
    private JComboBox<String> editGarageJComboBox;
    private JLabel editGarageJLabel;
    private JComboBox<String> editPetJComboBox;
    private JLabel editPetsJLabel;
    private JLabel editPriceJLabel;
    private JTextField editPriceJTextField;
    private JLabel editRentalDescJLabel;
    private JScrollPane editRentalDescJScrollPane;
    private JTextArea editRentalDescJTextArea;
    private JLabel editRentalIdJLabel;
    private JTextField editRentalIdJTextField;
    private JLabel editRentalJLabel;
    private JPanel editRentalJPanel;
    private JLabel editRoomJLabel;
    private JTextField editRoomJTextField;
    private JButton editUpdateJButton;
    private JLabel enterRentalJLabel;
    private JButton exitJButton;
    private JLabel jLabel1;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane3;
    private JTable jTable1;
    private JTabbedPane rentalJTabbedPane;
    private JLabel roomAddressDetailsJLabel;
    private JTextField roomAddressDetailsJTextField;
    private JComboBox<String> roomAttBathrromJComboBox;
    private JLabel roomBathroomJLabel;
    private JComboBox<String> roomCouplesJComboBox;
    private JLabel roomCouplesJLabel;
    private JComboBox<String> roomFurnishedJComboBox;
    private JLabel roomFurnishedJLabel;
    private JLabel roomPriceJLabel;
    private JTextField roomPriceJTextField;
    private JLabel roomRentalDescJLabel;
    private JScrollPane roomRentalDescJScrollPane;
    private JTextArea roomRentalDescJTextArea;
    private JLabel roomRentalIdJLabel;
    private JTextField roomRentalIdJTextField;
    private JPanel roomRentalJPanel;
    private JButton roomSaveJButton;
    private JLabel welcomeJLabel;
    private JPanel welcomeJPanel;
    private JLabel wholeAddressDetailsJLabel;
    private JTextField wholeAddressDetailsJTextField;
    private JLabel wholeBathroomJLabel;
    private JTextField wholeBathroomJTextField;
    private JComboBox<String> wholeFurnishedJComboBox;
    private JLabel wholeFurnishedJLabel;
    private JComboBox<String> wholeGarageJComboBox;
    private JLabel wholeGarageJLabel;
    private JComboBox<String> wholePetsJComboBox;
    private JLabel wholePetsJLabel;
    private JLabel wholePriceJLabel;
    private JTextField wholePriceJTextField;
    private JLabel wholeRentalDescJLabel;
    private JScrollPane wholeRentalDescJScrollPane;
    private JTextArea wholeRentalDescJTextArea;
    private JLabel wholeRentalIdJLabel;
    private JTextField wholeRentalIdJTextField;
    private JPanel wholeRentalJPanel;
    private JLabel wholeRoomJLabel;
    private JTextField wholeRoomJTextField;
    private JButton wholeSaveJButton;
    // End of variables declaration//GEN-END:variables
}
